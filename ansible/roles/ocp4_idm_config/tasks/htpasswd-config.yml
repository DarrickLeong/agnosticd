---
- when:
  - ocp4_idm_config_user_password != ''
  - ocp4_idm_config_user_password_hash == ''
  block:
  - name: Generate htpasswd hash for user_password
    shell: >-
      htpasswd -nb "userN" "{{ user_password }}" | cut -d: -f2
    register: r_htpasswd_line

  - name: Set fact user_password_hash
    set_fact:
      ocp4_idm_config_user_password_hash: "{{ r_htpasswd_line.stdout }}"
      user_password_hash: "{{ r_htpasswd_line.stdout }}"
    when:
    - ocp4_idm_config_user_password != ''
    - ocp4_idm_config_user_password_hash == ''

- when:
  - ocp4_idm_config_admin_password != ''
  - ocp4_idm_config_admin_password_hash == ''
  block:
  - name: Generate htpasswd hash for admin user
    shell: >-
      htpasswd -nb "admin" "{{ admin_password }}"|cut -d: -f2
    register: r_htpasswd_line

  - name: Set fact admin_password_hash
    set_fact:
      ocp4_adm_config_admin_password_hash: "{{ r_htpasswd_line.stdout }}"

- name: Set fact user_count
  set_fact:
    user_count: "{{ _ocp4_idm_config_user_count }}"
  when:
  - user_count is not defined

- name: Generate htpasswd file
  template:
    src: htpasswd.j2
    dest: "/home/{{ ansible_user }}/users.htpasswd"
    owner: "{{ ansible_user }}"
    mode: u=rw,go=
  vars:
    # Force htpasswd user passwords to exist from user 0 .. 200 at minimum
    # Password template also includes users andrew and karla with fixed passwords
    t_user_count_start: 0
    t_user_count: "{{ [user_count|int + 1, 200] | max }}"

- name: Upload OAuth Configuration File
  copy:
    src: oauth-htpasswd.yaml
    dest: "/home/{{ ansible_user }}/oauth-htpasswd.yaml"
    owner: "{{ ansible_user }}"
    mode: u=rw,go=

- name: Create htpasswd Secret
  command: oc create secret generic htpasswd-secret -n openshift-config --from-file=htpasswd=$HOME/users.htpasswd
  ignore_errors: true

- name: Update OAuth Configuration
  shell: "oc apply -f /home/{{ ansible_user }}/oauth-htpasswd.yaml"

- name: Output login information for users
  when:
    - _ocp4_idm_config_user_count | int > 0
    - ocp4_idm_config_user_password is defined
  loop: >-
    {{ range(
         ocp4_idm_config_user_count_start | int,
         ocp4_idm_config_user_count_start | int + _ocp4_idm_config_user_count | int
    ) | list }}
  loop_control:
    loop_var: n
    label: "{{ t_user }}"
  vars:
    t_user: "{{ ocp4_idm_config_user_base_name }}{{ n }}"
  agnosticd_user_info:
    user: "{{ t_user }}"
    data:
      openshift_user: "{{ t_user }}"
      openshift_password: "{{ ocp4_idm_config_user_password }}"
      openshift_webconsole_url: "{{ openshift_webconsole_url | default(webconsole) }}"
      openshift_api_url: "{{ openshift_api_url }}"
      openshift_client_download_url: "{{ openshift_client_download_url | default(ocp4_client_url) | default('') }}"
